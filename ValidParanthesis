class Solution {
    public boolean isValid(String s) {
        Stack <Character> st = new Stack<>();
      for(int i=0;i<s.length();i++)
      {
          if(s.charAt(i)=='(' || s.charAt(i)== '{' || s.charAt(i)== '[')
          {
              st.push(s.charAt(i));
          }
          else if(s.charAt(i) == ')' && !st.empty() && st.peek() == '(' )   //if the current character is closed paranthesis and if the stack is not empty and the top of the stack is closed paranthesis then pop the stack 
        
          {
              st.pop();
          }
          else if(s.charAt(i) == '}' && !st.empty() && st.peek() == '{' )
          {
              st.pop();
          }
          else if(s.charAt(i) == ']' && !st.empty() && st.peek() == '[' )
          {
              st.pop();
          }
          else
          {
              return false;
          }
      }
        return st.isempty();    //returns true if stack is empty
    }
}
